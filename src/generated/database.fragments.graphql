# THIS FILE HAS BEEN AUTO-GENERATED BY "graphql-cli-generate-fragments"
# DO NOT EDIT THIS FILE DIRECTLY

# Standard Fragments
# Nested fragments will spread one layer deep


fragment User on User {
  id
  name
  email
  password
  posts {
    ...PostNoNesting
  }
}

fragment Post on Post {
  id
  user {
    ...UserNoNesting
  }
  published
  title
  content {
    ...ContentNoNesting
  }
}

fragment Content on Content {
  data
}

fragment UserConnection on UserConnection {
  pageInfo {
    ...PageInfoNoNesting
  }
  edges {
    ...UserEdgeNoNesting
  }
  aggregate {
    ...AggregateUserNoNesting
  }
}

fragment PageInfo on PageInfo {
  hasNextPage
  hasPreviousPage
  startCursor
  endCursor
}

fragment UserEdge on UserEdge {
  node {
    ...UserNoNesting
  }
  cursor
}

fragment AggregateUser on AggregateUser {
  count
}

fragment PostConnection on PostConnection {
  pageInfo {
    ...PageInfoNoNesting
  }
  edges {
    ...PostEdgeNoNesting
  }
  aggregate {
    ...AggregatePostNoNesting
  }
}

fragment PostEdge on PostEdge {
  node {
    ...PostNoNesting
  }
  cursor
}

fragment AggregatePost on AggregatePost {
  count
}

fragment BatchPayload on BatchPayload {
  count
}

fragment UserSubscriptionPayload on UserSubscriptionPayload {
  mutation
  node {
    ...UserNoNesting
  }
  updatedFields
  previousValues {
    ...UserPreviousValuesNoNesting
  }
}

fragment UserPreviousValues on UserPreviousValues {
  id
  name
  email
  password
}

fragment PostSubscriptionPayload on PostSubscriptionPayload {
  mutation
  node {
    ...PostNoNesting
  }
  updatedFields
  previousValues {
    ...PostPreviousValuesNoNesting
  }
}

fragment PostPreviousValues on PostPreviousValues {
  id
  published
  title
}


# No Relational objects
# No nested fragments


fragment UserNoNesting on User {
  id
  name
  email
  password
}

fragment PostNoNesting on Post {
  id
  published
  title
}

fragment ContentNoNesting on Content {
  data
}

fragment PageInfoNoNesting on PageInfo {
  hasNextPage
  hasPreviousPage
  startCursor
  endCursor
}

fragment UserEdgeNoNesting on UserEdge {
  cursor
}

fragment AggregateUserNoNesting on AggregateUser {
  count
}

fragment PostEdgeNoNesting on PostEdge {
  cursor
}

fragment AggregatePostNoNesting on AggregatePost {
  count
}

fragment BatchPayloadNoNesting on BatchPayload {
  count
}

fragment UserSubscriptionPayloadNoNesting on UserSubscriptionPayload {
  mutation
  updatedFields
}

fragment UserPreviousValuesNoNesting on UserPreviousValues {
  id
  name
  email
  password
}

fragment PostSubscriptionPayloadNoNesting on PostSubscriptionPayload {
  mutation
  updatedFields
}

fragment PostPreviousValuesNoNesting on PostPreviousValues {
  id
  published
  title
}


# Deeply nested Fragments
# Will include n nested fragments
# If there is a recursive relation you will receive a
# "Cannot spread fragment within itself" error when using


fragment UserDeepNesting on User {
  id
  name
  email
  password
  posts {
    ...PostDeepNesting
  }
}

fragment PostDeepNesting on Post {
  id
  user {
    ...UserDeepNesting
  }
  published
  title
  content {
    ...ContentDeepNesting
  }
}

fragment ContentDeepNesting on Content {
  data
}

fragment UserConnectionDeepNesting on UserConnection {
  pageInfo {
    ...PageInfoDeepNesting
  }
  edges {
    ...UserEdgeDeepNesting
  }
  aggregate {
    ...AggregateUserDeepNesting
  }
}

fragment PageInfoDeepNesting on PageInfo {
  hasNextPage
  hasPreviousPage
  startCursor
  endCursor
}

fragment UserEdgeDeepNesting on UserEdge {
  node {
    ...UserDeepNesting
  }
  cursor
}

fragment AggregateUserDeepNesting on AggregateUser {
  count
}

fragment PostConnectionDeepNesting on PostConnection {
  pageInfo {
    ...PageInfoDeepNesting
  }
  edges {
    ...PostEdgeDeepNesting
  }
  aggregate {
    ...AggregatePostDeepNesting
  }
}

fragment PostEdgeDeepNesting on PostEdge {
  node {
    ...PostDeepNesting
  }
  cursor
}

fragment AggregatePostDeepNesting on AggregatePost {
  count
}

fragment BatchPayloadDeepNesting on BatchPayload {
  count
}

fragment UserSubscriptionPayloadDeepNesting on UserSubscriptionPayload {
  mutation
  node {
    ...UserDeepNesting
  }
  updatedFields
  previousValues {
    ...UserPreviousValuesDeepNesting
  }
}

fragment UserPreviousValuesDeepNesting on UserPreviousValues {
  id
  name
  email
  password
}

fragment PostSubscriptionPayloadDeepNesting on PostSubscriptionPayload {
  mutation
  node {
    ...PostDeepNesting
  }
  updatedFields
  previousValues {
    ...PostPreviousValuesDeepNesting
  }
}

fragment PostPreviousValuesDeepNesting on PostPreviousValues {
  id
  published
  title
}

